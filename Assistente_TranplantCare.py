import streamlit as st
import google.generativeai as genai
import os
import json

# --- Instalar bibliotecas extras (rodar no terminal do ambiente virtual) ---
# Rode no seu terminal (ambiente virtual ativo):
# pip install streamlit google-generativeai googlesearch-python

# --- Configura√ß√£o da API Key (Adaptada para Streamlit/Vari√°veis de Ambiente) ---
API_KEY = os.getenv('GOOGLE_API_KEY')

if not API_KEY:
    st.error("Erro: Chave da API do Google n√£o encontrada. Defina a vari√°vel de ambiente GOOGLE_API_KEY ou use o Secrets do Streamlit Cloud.")
    st.stop()

try:
    genai.configure(api_key=API_KEY)
    # st.success("API Key configurada com sucesso!") # Feedback visual removido
except Exception as e:
    st.error(f"Erro ao configurar a API Key. Verifique sua chave. Detalhe: {e}")
    st.stop()

# --- Defini√ß√£o das Fun√ß√µes (Nossas Ferramentas Reais) ---

# Nossa ferramenta de adicionar lembrete
def adicionar_lembrete_func(tarefa: str, horario: str, data: str = None):
    """Adiciona um lembrete para o paciente sobre uma tarefa m√©dica ou compromisso."""
    lembrete_str = f"Lembrete: {tarefa} √†s {horario}"
    if data:
        lembrete_str += f" em {data}"
    st.session_state.lista_lembretes.append(lembrete_str)
    print(f"DEBUG (Terminal): Fun√ß√£o 'adicionar_lembrete_func' executada. Lembrete: '{lembrete_str}'")
    return f"Lembrete para '{tarefa}' anotado."

# --- NOVA FUN√á√ÉO: Ferramenta de Busca na Internet ---
from googlesearch import search # Importa a fun√ß√£o de busca da biblioteca instalada

def buscar_na_internet_func(query: str):
    """Busca informa√ß√µes na internet usando a consulta fornecida."""
    print(f"\nDEBUG (Terminal): Fun√ß√£o 'buscar_na_internet_func' executada com query: '{query}'")
    try:
        # Realiza a busca (limita para os 5 primeiros resultados, timeout de 5 segundos)
        # Pode ajustar num_results e timeout conforme necess√°rio
        search_results = list(search(query, num_results=5, timeout=5))

        if not search_results:
            return "Nenhum resultado encontrado na internet para esta busca."

        # Formata os resultados para enviar para a IA
        # A biblioteca googlesearch-python retorna URLs. Podemos formatar como lista.
        formatted_results = "Resultados da busca:\n"
        for i, result in enumerate(search_results):
             formatted_results += f"{i+1}. {result}\n"

        # Limita o tamanho do resultado para n√£o estourar o limite de tokens da IA
        # O limite exato pode variar, 1500 √© um valor de seguran√ßa
        if len(formatted_results) > 1500:
             formatted_results = formatted_results[:1500] + "..." # Trunca se for muito longo


        return formatted_results # Retorna a string formatada dos resultados para a IA

    except Exception as e:
        print(f"DEBUG (Terminal): Erro ao executar busca na internet: {e}")
        # Retorna uma mensagem de erro para a IA caso a busca falhe
        return f"Ocorreu um erro ao buscar na internet: {e}"


# --- Mapeia os nomes das ferramentas para as fun√ß√µes Python reais ---
# Este dicion√°rio permite encontrar a fun√ß√£o correta a partir do nome que a IA solicitar
tools_available = {
    "adicionar_lembrete": adicionar_lembrete_func, # Mapeia o nome "adicionar_lembrete" para a fun√ß√£o adicionar_lembrete_func
    "buscar_na_internet": buscar_na_internet_func, # Mapeia o nome "buscar_na_internet" para a fun√ß√£o buscar_na_internet_func
}


# --- Descri√ß√£o das Ferramentas para o Modelo ---
# Esta lista diz para a IA quais fun√ß√µes existem, o que elas fazem, e quais par√¢metros esperam
tools_description = [
    {
        "function_declarations": [
            # Descri√ß√£o da ferramenta de lembrete
            {
                "name": "adicionar_lembrete",
                "description": "Adiciona um lembrete para o paciente sobre uma tarefa m√©dica ou compromisso, incluindo o que lembrar, hor√°rio e data (se especificada).",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "tarefa": {
                            "type": "string",
                            "description": "A descri√ß√£o clara e concisa da tarefa a ser lembrada (ex: tomar rem√©dio, consulta com nefrologista, fazer exame de sangue)."
                        },
                        "horario": {
                            "type": "string",
                            "description": "O hor√°rio espec√≠fico do lembrete na linguagem do usu√°rio (ex: 8 da manh√£, 14:30, meio-dia). Tente extrair o mais preciso poss√≠vel."
                        },
                         "data": {
                            "type": "string",
                            "description": "A data do lembrete se for para um dia espec√≠fico diferente de hoje (ex: amanh√£, segunda-feira, 25 de dezembro). Opcional.",
                            "nullable": True
                        }
                    },
                    "required": ["tarefa", "horario"]
                }
            },
            # --- NOVA DESCRI√á√ÉO DE FERRAMENTA: Buscar na Internet ---
            {
                "name": "buscar_na_internet", # Nome EXATO da chave em tools_available
                "description": "Busca informa√ß√µes gerais na internet sobre um t√≥pico espec√≠fico. Use para responder perguntas sobre eventos recentes, fatos espec√≠ficos, defini√ß√µes, ou qualquer coisa que n√£o esteja no conhecimento geral do assistente ou exija dados atualizados.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "A consulta de busca clara e concisa a ser usada para encontrar a informa√ß√£o relevante."
                        }
                    },
                    "required": ["query"] # A IA DEVE fornecer uma consulta para a busca
                }
            }
            # Adicionar descri√ß√µes de outras ferramentas aqui
        ]
    }
]


# --- Instanciar o Modelo (Passando TODAS as Ferramentas AQUI e usando st.session_state) ---
# Usamos st.session_state para garantir que o modelo s√≥ seja instanciado uma vez por sess√£o do usu√°rio
if 'model' not in st.session_state:
    try:
        # Passando tools=tools_description para genai.GenerativeModel
        st.session_state.model = genai.GenerativeModel(
            model_name='gemini-1.5-flash-latest', # Ou outro modelo adequado
            tools=tools_description # <-- Passamos TODAS as descri√ß√µes das ferramentas AQUI!
            # tool_config={"function_calling_config": "ANY"} # Opcional: Pode adicionar AQUI se suportado e necess√°rio para encorajar o uso de tools
        )
        # st.success(f"Modelo '{st.session_state.model.model_name}' instanciado com ferramentas.") # Feedback visual removido
    except Exception as e:
        st.error(f"Erro ao instanciar o modelo com ferramentas. Verifique o nome do modelo, sua API Key ou a descri√ß√£o das ferramentas. Detalhe: {e}")
        st.stop()

# --- Iniciar o Chat (Sem Mensagem system no Hist√≥rico Inicial) ---
# Vamos tentar iniciar o chat sem a mensagem expl√≠cita com role="system" no hist√≥rico.
# Isso pode resolver o erro 400 em algumas vers√µes da API/modelo.
if 'chat' not in st.session_state:
    # O texto da instru√ß√£o do sistema ainda est√° na vari√°vel system_instruction_text,
    # mas N√ÉO a passaremos no hist√≥rico inicial.
    # Alguns modelos podem ainda usar instru√ß√µes passadas na instancia√ß√£o ou depender das tool descriptions.
    try:
        # Removido o history=[{"role": "system", "parts": [...]}]
        st.session_state.chat = st.session_state.model.start_chat(history=[])
        # tools e tool_config j√° foram passados na instancia√ß√£o do modelo

        # st.info("Chat iniciado com ferramentas.") # Feedback visual removido
    except Exception as e:
         st.error(f"Erro ao iniciar o chat. Detalhe: {e}")
         st.stop()

# NOTA: Sem a instru√ß√£o do sistema no hist√≥rico, o comportamento geral da IA
# pode ser um pouco diferente. Ela depender√° mais das descri√ß√µes das ferramentas
# e do seu treinamento geral. Se precisar de um comportamento mais espec√≠fico,
# podemos tentar adicionar a instru√ß√£o como a primeira mensagem do usu√°rio,
# ou verificar se h√° outra forma de passar system instructions compat√≠vel.

# --- Lista para Armazenar Lembretes (Usando st.session_state) ---
if 'lista_lembretes' not in st.session_state:
    st.session_state.lista_lembretes = []

# --- Interface Gr√°fica com Streamlit ---
st.title("Assistente Pessoal para Pacientes Transplantados")
st.warning("ATEN√á√ÉO: Este assistente √© um prot√≥tipo e N√ÉO substitui o aconselhamento m√©dico profissional. Sempre consulte sua equipe de sa√∫de para decis√µes sobre seu tratamento.")

# √Årea para exibir a conversa (hist√≥rico vis√≠vel)
if 'mensagens' not in st.session_state:
    st.session_state.mensagens = [] # Lista de dicion√°rios para o hist√≥rico vis√≠vel

# Exibir mensagens anteriores do hist√≥rico vis√≠vel
for mensagem in st.session_state.mensagens:
    if mensagem["role"] == "user":
        with st.chat_message("user"):
            st.markdown(mensagem["content"])
    elif mensagem["role"] == "assistant":
         with st.chat_message("assistant"):
            st.markdown(mensagem["content"])
    elif mensagem["role"] == "tool_code": # Exibe que uma chamada de ferramenta foi detectada
         with st.expander("ü§ñ Chamada de Ferramenta Detectada"):
              st.json(mensagem["content"]) # Mostra os detalhes da chamada (nome e args)
    elif mensagem["role"] == "tool_result": # Exibe o resultado retornado pela ferramenta
         with st.expander("‚úÖ Resultado da Ferramenta"):
              # Tenta exibir como JSON se for um dicion√°rio, sen√£o exibe como texto
              content = mensagem["content"]
              try:
                  st.json(json.loads(content)) # Tenta carregar como JSON
              except (json.JSONDecodeError, TypeError):
                   st.text(content) # Se n√£o for JSON, exibe como texto simples


# Campo de entrada do usu√°rio na parte inferior
user_input = st.chat_input("Como posso ajudar?")

# --- L√≥gica de Processamento (Este bloco roda QUANDO o usu√°rio envia uma mensagem) ---
if user_input:
    # --- 1. Adicionar a mensagem do usu√°rio ao hist√≥rico vis√≠vel e exibir ---
    st.session_state.mensagens.append({"role": "user", "content": user_input})
    with st.chat_message("user"):
        st.markdown(user_input)

    # --- 2. Enviar a mensagem para o chat do Gemini (que est√° em session_state) ---
    # A IA (que foi instanciada COM as ferramentas) pode responder com texto OU uma chamada de fun√ß√£o
    try:
        # Adiciona uma mensagem tempor√°ria enquanto espera a resposta da IA
        with st.chat_message("assistant"):
            with st.spinner("Pensando..."): # Mostra um spinner
                 response = st.session_state.chat.send_message(user_input)

        # --- 3. Processar a Resposta da IA e Executar Ferramentas (Orquestra√ß√£o) ---

        # Verifica a resposta do modelo: Primeiro checa se houve chamada de fun√ß√£o
        if response.function_calls:
            print("DEBUG (Terminal): IA solicitou chamada(s) de fun√ß√£o.")
            # N√£o adicionamos "Pensando em como usar as ferramentas..." ao hist√≥rico vis√≠vel aqui,
            # pois j√° usamos o spinner acima. Podemos adicionar o resultado da execu√ß√£o ao hist√≥rico.

            # Executa cada chamada de fun√ß√£o que a IA solicitou
            for fc in response.function_calls:
                tool_name = fc.name
                tool_args = fc.args

                # Opcional: Adicionar a chamada de fun√ß√£o ao hist√≥rico vis√≠vel para debug
                st.session_state.mensagens.append({"role": "tool_code", "content": {"tool_name": tool_name, "args": tool_args}})

                if tool_name in tools_available:
                    print(f"DEBUG (Terminal): Executando ferramenta: '{tool_name}' com args: {tool_args}")
                    try:
                        # --- Executar a Ferramenta Real (sua fun√ß√£o Python) ---
                        # Encontra a fun√ß√£o Python correspondente e a chama
                        tool_result = tools_available[tool_name](**tool_args)

                        print(f"DEBUG (Terminal): Resultado da ferramenta '{tool_name}': '{tool_result}'")
                        # Opcional: Adicionar o resultado da ferramenta ao hist√≥rico vis√≠vel para debug
                        st.session_state.mensagens.append({"role": "tool_result", "content": tool_result})


                        # --- 4. Enviar o Resultado da Ferramenta de Volta para a IA ---
                        # Isso √© CRUCIAL. Permite que a IA saiba que a ferramenta rodou e qual foi o resultado,
                        # para ent√£o gerar a resposta final amig√°vel para o usu√°rio.
                        response_from_tool = st.session_state.chat.send_message(
                            {"role": "tool", # Indica que esta mensagem √© a resposta DA FERRAMENTA
                             "parts": [{"functionResponse": {"name": tool_name, "response": {"content": tool_result}}}]} # Formato esperado pela API
                        )

                        # --- 5. Obter a Resposta Final da IA para o Usu√°rio ---
                        # A resposta final (que usou o resultado da ferramenta para formular a resposta)
                        if response_from_tool.text:
                             st.session_state.mensagens.append({"role": "assistant", "content": response_from_tool.text})
                        else:
                             # Caso a IA n√£o gere texto ap√≥s a resposta da ferramenta (raro)
                             st.session_state.mensagens.append({"role": "assistant", "content": "OK. A√ß√£o realizada ou informa√ß√£o obtida."})


                    except Exception as ex_func:
                        # 6. Lidar com erros na execu√ß√£o da sua fun√ß√£o Python
                        error_message = f"Erro ao executar a ferramenta '{tool_name}'. Detalhe: {ex_func}"
                        print(f"DEBUG (Terminal): {error_message}")
                        st.session_state.mensagens.append({"role": "assistant", "content": f"Desculpe, tive um problema ao tentar executar a a√ß√£o solicitada ({tool_name})."})


                else:
                    # 7. A IA pediu uma ferramenta que n√£o definimos!
                    print(f"DEBUG (Terminal): IA solicitou ferramenta desconhecida em tools_available: {tool_name}")
                    st.session_state.mensagens.append({"role": "assistant", "content": f"Desculpe, n√£o consigo realizar essa a√ß√£o solicitada ({tool_name})."})


        # 8. Se a IA N√ÉO pediu fun√ß√£o, ela respondeu apenas com texto direto
        elif response.text:
            print("DEBUG (Terminal): IA respondeu apenas com texto.")
            st.session_state.mensagens.append({"role": "assistant", "content": response.text})

        # 9. Outro tipo de resposta ou resposta vazia do modelo
        else:
             print("DEBUG (Terminal): Resposta da IA vazia ou inesperada.")
             st.session_state.mensagens.append({"role": "assistant", "content": "N√£o consegui obter uma resposta v√°lida no momento."})

        # --- 10. Gatilho para re-executar o script e atualizar a tela ---
        st.rerun() # Isso faz o Streamlit recarregar a p√°gina para mostrar as novas mensagens e o estado atual

    except Exception as e:
        # 11. Lidar com erros gerais na comunica√ß√£o com a API ou processamento
        print(f"DEBUG (Terminal): Erro geral no processamento da resposta: {e}")
        st.error(f"Ocorreu um erro ao processar sua mensagem. Por favor, tente novamente. Detalhe do erro: {e}")


# --- √Årea de Lembretes na Sidebar ---
# Esta se√ß√£o sempre ser√° exibida na barra lateral
with st.sidebar:
    st.header("Lembretes Anotados")
    if st.session_state.lista_lembretes:
        for i, lembrete in enumerate(st.session_state.lista_lembretes):
            st.write(f"‚Ä¢ {lembrete}") # Usando bullet points
    else:
        st.write("Nenhum lembrete anotado ainda.")

# --- Fim do Script app.py ---